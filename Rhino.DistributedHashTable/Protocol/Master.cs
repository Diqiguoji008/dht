// Generated by the protocol buffer compiler.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Rhino.DistributedHashTable.Protocol {
  
  public static partial class Master {
  
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static readonly pbd::FileDescriptor descriptor = pbd::FileDescriptor.InternalBuildGeneratedFileFrom(
        global::System.Convert.FromBase64String(
        "CgxNYXN0ZXIucHJvdG8SI1JoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlBy" + 
        "b3RvY29sIisKDE5vZGVFbmRwb2ludBIMCgRTeW5jGAEgAigJEg0KBUFzeW5j" + 
        "GAIgAigJImAKEkpvaW5SZXF1ZXN0TWVzc2FnZRJKCg9FbmRwb2ludEpvaW5p" + 
        "bmcYASACKAsyMS5SaGluby5EaXN0cmlidXRlZEhhc2hUYWJsZS5Qcm90b2Nv" + 
        "bC5Ob2RlRW5kcG9pbnQiVQoTSm9pblJlc3BvbnNlTWVzc2FnZRI+CghTZWdt" + 
        "ZW50cxgBIAMoCzIsLlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxlLlByb3Rv" + 
        "Y29sLlNlZ21lbnQikgIKB1NlZ21lbnQSDQoFSW5kZXgYASACKAUSDwoHVmVy" + 
        "c2lvbhgCIAIoDBJLChBBc3NpZ25lZEVuZHBvaW50GAMgAigLMjEuUmhpbm8u" + 
        "RGlzdHJpYnV0ZWRIYXNoVGFibGUuUHJvdG9jb2wuTm9kZUVuZHBvaW50ElYK" + 
        "G0luUHJvY2Vzc09mTW92aW5nVG9FbmRwb2ludBgEIAEoCzIxLlJoaW5vLkRp" + 
        "c3RyaWJ1dGVkSGFzaFRhYmxlLlByb3RvY29sLk5vZGVFbmRwb2ludBJCCgdC" + 
        "YWNrdXBzGAUgAygLMjEuUmhpbm8uRGlzdHJpYnV0ZWRIYXNoVGFibGUuUHJv" + 
        "dG9jb2wuTm9kZUVuZHBvaW50IoMBChVUb3BvbG9neVJlc3VsdE1lc3NhZ2US" + 
        "GQoRVGltZXN0YW1wQXNEb3VibGUYASACKAESDwoHVmVyc2lvbhgCIAIoDBI+" + 
        "CghTZWdtZW50cxgDIAMoCzIsLlJoaW5vLkRpc3RyaWJ1dGVkSGFzaFRhYmxl" + 
        "LlByb3RvY29sLlNlZ21lbnQivAIKDk1lc3NhZ2VXcmFwcGVyEj4KBFR5cGUY" + 
        "ASACKA4yMC5SaGluby5EaXN0cmlidXRlZEhhc2hUYWJsZS5Qcm90b2NvbC5N" + 
        "ZXNzYWdlVHlwZRJMCgtKb2luUmVxdWVzdBgCIAEoCzI3LlJoaW5vLkRpc3Ry" + 
        "aWJ1dGVkSGFzaFRhYmxlLlByb3RvY29sLkpvaW5SZXF1ZXN0TWVzc2FnZRJO" + 
        "CgxKb2luUmVzcG9uc2UYAyABKAsyOC5SaGluby5EaXN0cmlidXRlZEhhc2hU" + 
        "YWJsZS5Qcm90b2NvbC5Kb2luUmVzcG9uc2VNZXNzYWdlEkwKCFRvcG9sb2d5" + 
        "GAQgASgLMjouUmhpbm8uRGlzdHJpYnV0ZWRIYXNoVGFibGUuUHJvdG9jb2wu" + 
        "VG9wb2xvZ3lSZXN1bHRNZXNzYWdlKl0KC01lc3NhZ2VUeXBlEhYKEkdldFRv" + 
        "cG9sb2d5UmVxdWVzdBABEhUKEUdldFRvcG9sb2d5UmVzdWx0EAISDwoLSm9p" + 
        "blJlcXVlc3QQAxIOCgpKb2luUmVzdWx0EARCAkgB"),
        new pbd::FileDescriptor[] {
        });
    #endregion
    
    #region Static variables
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_NodeEndpoint__Descriptor
        = Descriptor.MessageTypes[0];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint, global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder> internal__static_Rhino_DistributedHashTable_Protocol_NodeEndpoint__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint, global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_NodeEndpoint__Descriptor,
            new string[] { "Sync", "Async", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_JoinRequestMessage__Descriptor
        = Descriptor.MessageTypes[1];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage, global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_JoinRequestMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage, global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_JoinRequestMessage__Descriptor,
            new string[] { "EndpointJoining", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_JoinResponseMessage__Descriptor
        = Descriptor.MessageTypes[2];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage, global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_JoinResponseMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage, global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_JoinResponseMessage__Descriptor,
            new string[] { "Segments", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_Segment__Descriptor
        = Descriptor.MessageTypes[3];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.Segment, global::Rhino.DistributedHashTable.Protocol.Segment.Builder> internal__static_Rhino_DistributedHashTable_Protocol_Segment__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.Segment, global::Rhino.DistributedHashTable.Protocol.Segment.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_Segment__Descriptor,
            new string[] { "Index", "Version", "AssignedEndpoint", "InProcessOfMovingToEndpoint", "Backups", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_TopologyResultMessage__Descriptor
        = Descriptor.MessageTypes[4];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage, global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.Builder> internal__static_Rhino_DistributedHashTable_Protocol_TopologyResultMessage__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage, global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_TopologyResultMessage__Descriptor,
            new string[] { "TimestampAsDouble", "Version", "Segments", });
    internal static readonly pbd::MessageDescriptor internal__static_Rhino_DistributedHashTable_Protocol_MessageWrapper__Descriptor
        = Descriptor.MessageTypes[5];
    internal static pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.MessageWrapper, global::Rhino.DistributedHashTable.Protocol.MessageWrapper.Builder> internal__static_Rhino_DistributedHashTable_Protocol_MessageWrapper__FieldAccessorTable
        = new pb::FieldAccess.FieldAccessorTable<global::Rhino.DistributedHashTable.Protocol.MessageWrapper, global::Rhino.DistributedHashTable.Protocol.MessageWrapper.Builder>(internal__static_Rhino_DistributedHashTable_Protocol_MessageWrapper__Descriptor,
            new string[] { "Type", "JoinRequest", "JoinResponse", "Topology", });
    #endregion
  }
  #region Enums
  public enum MessageType {
    GetTopologyRequest = 1,
    GetTopologyResult = 2,
    JoinRequest = 3,
    JoinResult = 4,
  }
  
  #endregion
  
  #region Messages
  public sealed partial class NodeEndpoint : pb::GeneratedMessage<NodeEndpoint, NodeEndpoint.Builder> {
    private static readonly NodeEndpoint defaultInstance = new Builder().BuildPartial();
    public static NodeEndpoint DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NodeEndpoint DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override NodeEndpoint ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_NodeEndpoint__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NodeEndpoint, NodeEndpoint.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_NodeEndpoint__FieldAccessorTable; }
    }
    
    private bool hasSync;
    private string sync_ = "";
    public bool HasSync {
      get { return hasSync; }
    }
    public string Sync {
      get { return sync_; }
    }
    
    private bool hasAsync;
    private string async_ = "";
    public bool HasAsync {
      get { return hasAsync; }
    }
    public string Async {
      get { return async_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSync) return false;
        if (!hasAsync) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasSync) {
        output.WriteString(1, Sync);
      }
      if (HasAsync) {
        output.WriteString(2, Async);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasSync) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Sync);
        }
        if (HasAsync) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Async);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NodeEndpoint ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NodeEndpoint ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NodeEndpoint prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<NodeEndpoint, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      NodeEndpoint result = new NodeEndpoint();
      
      protected override NodeEndpoint MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new NodeEndpoint();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return NodeEndpoint.Descriptor; }
      }
      
      public override NodeEndpoint DefaultInstanceForType {
        get { return NodeEndpoint.DefaultInstance; }
      }
      
      public override NodeEndpoint BuildPartial() {
        NodeEndpoint returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NodeEndpoint) {
          return MergeFrom((NodeEndpoint) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NodeEndpoint other) {
        if (other == NodeEndpoint.DefaultInstance) return this;
        if (other.HasSync) {
          Sync = other.Sync;
        }
        if (other.HasAsync) {
          Async = other.Async;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              Sync = input.ReadString();
              break;
            }
            case 18: {
              Async = input.ReadString();
              break;
            }
          }
        }
      }
      
      
      public bool HasSync {
        get { return result.HasSync; }
      }
      public string Sync {
        get { return result.Sync; }
        set { SetSync(value); }
      }
      public Builder SetSync(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasSync = true;
        result.sync_ = value;
        return this;
      }
      public Builder ClearSync() {
        result.hasSync = false;
        result.sync_ = "";
        return this;
      }
      
      public bool HasAsync {
        get { return result.HasAsync; }
      }
      public string Async {
        get { return result.Async; }
        set { SetAsync(value); }
      }
      public Builder SetAsync(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAsync = true;
        result.async_ = value;
        return this;
      }
      public Builder ClearAsync() {
        result.hasAsync = false;
        result.async_ = "";
        return this;
      }
    }
  }
  
  public sealed partial class JoinRequestMessage : pb::GeneratedMessage<JoinRequestMessage, JoinRequestMessage.Builder> {
    private static readonly JoinRequestMessage defaultInstance = new Builder().BuildPartial();
    public static JoinRequestMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinRequestMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override JoinRequestMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_JoinRequestMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinRequestMessage, JoinRequestMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_JoinRequestMessage__FieldAccessorTable; }
    }
    
    private bool hasEndpointJoining;
    private global::Rhino.DistributedHashTable.Protocol.NodeEndpoint endpointJoining_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
    public bool HasEndpointJoining {
      get { return hasEndpointJoining; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint EndpointJoining {
      get { return endpointJoining_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEndpointJoining) return false;
        if (!EndpointJoining.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasEndpointJoining) {
        output.WriteMessage(1, EndpointJoining);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasEndpointJoining) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, EndpointJoining);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinRequestMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinRequestMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinRequestMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<JoinRequestMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      JoinRequestMessage result = new JoinRequestMessage();
      
      protected override JoinRequestMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new JoinRequestMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return JoinRequestMessage.Descriptor; }
      }
      
      public override JoinRequestMessage DefaultInstanceForType {
        get { return JoinRequestMessage.DefaultInstance; }
      }
      
      public override JoinRequestMessage BuildPartial() {
        JoinRequestMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinRequestMessage) {
          return MergeFrom((JoinRequestMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinRequestMessage other) {
        if (other == JoinRequestMessage.DefaultInstance) return this;
        if (other.HasEndpointJoining) {
          MergeEndpointJoining(other.EndpointJoining);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              if (HasEndpointJoining) {
                subBuilder.MergeFrom(EndpointJoining);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EndpointJoining = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasEndpointJoining {
       get { return result.HasEndpointJoining; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint EndpointJoining {
        get { return result.EndpointJoining; }
        set { SetEndpointJoining(value); }
      }
      public Builder SetEndpointJoining(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasEndpointJoining = true;
        result.endpointJoining_ = value;
        return this;
      }
      public Builder SetEndpointJoining(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasEndpointJoining = true;
        result.endpointJoining_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEndpointJoining(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasEndpointJoining &&
            result.endpointJoining_ != global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance) {
            result.endpointJoining_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder(result.endpointJoining_).MergeFrom(value).BuildPartial();
        } else {
          result.endpointJoining_ = value;
        }
        result.hasEndpointJoining = true;
        return this;
      }
      public Builder ClearEndpointJoining() {
        result.hasEndpointJoining = false;
        result.endpointJoining_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
        return this;
      }
    }
  }
  
  public sealed partial class JoinResponseMessage : pb::GeneratedMessage<JoinResponseMessage, JoinResponseMessage.Builder> {
    private static readonly JoinResponseMessage defaultInstance = new Builder().BuildPartial();
    public static JoinResponseMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinResponseMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override JoinResponseMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_JoinResponseMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinResponseMessage, JoinResponseMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_JoinResponseMessage__FieldAccessorTable; }
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.Segment> segments_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.Segment>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.Segment> SegmentsList {
      get { return segments_; }
    }
    public int SegmentsCount {
      get { return segments_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.Segment GetSegments(int index) {
      return segments_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
        output.WriteMessage(1, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JoinResponseMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinResponseMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinResponseMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<JoinResponseMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      JoinResponseMessage result = new JoinResponseMessage();
      
      protected override JoinResponseMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new JoinResponseMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return JoinResponseMessage.Descriptor; }
      }
      
      public override JoinResponseMessage DefaultInstanceForType {
        get { return JoinResponseMessage.DefaultInstance; }
      }
      
      public override JoinResponseMessage BuildPartial() {
        result.segments_.MakeReadOnly();
        JoinResponseMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinResponseMessage) {
          return MergeFrom((JoinResponseMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinResponseMessage other) {
        if (other == JoinResponseMessage.DefaultInstance) return this;
        if (other.segments_.Count != 0) {
          base.AddRange(other.segments_, result.segments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 10: {
              global::Rhino.DistributedHashTable.Protocol.Segment.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.Segment.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddSegments(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public scg::IList<global::Rhino.DistributedHashTable.Protocol.Segment> SegmentsList {
        get { return result.segments_; }
      }
      public int SegmentsCount {
        get { return result.SegmentsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.Segment GetSegments(int index) {
        return result.GetSegments(index);
      }
      public Builder SetSegments(int index, global::Rhino.DistributedHashTable.Protocol.Segment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.segments_[index] = value;
        return this;
      }
      public Builder SetSegments(int index, global::Rhino.DistributedHashTable.Protocol.Segment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.segments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSegments(global::Rhino.DistributedHashTable.Protocol.Segment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.segments_.Add(value);
        return this;
      }
      public Builder AddSegments(global::Rhino.DistributedHashTable.Protocol.Segment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.segments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSegments(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.Segment> values) {
        base.AddRange(values, result.segments_);
        return this;
      }
      public Builder ClearSegments() {
        result.segments_.Clear();
        return this;
      }
    }
  }
  
  public sealed partial class Segment : pb::GeneratedMessage<Segment, Segment.Builder> {
    private static readonly Segment defaultInstance = new Builder().BuildPartial();
    public static Segment DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Segment DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override Segment ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_Segment__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Segment, Segment.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_Segment__FieldAccessorTable; }
    }
    
    private bool hasIndex;
    private int index_ = 0;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    private bool hasVersion;
    private pb::ByteString version_ = pb::ByteString.Empty;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public pb::ByteString Version {
      get { return version_; }
    }
    
    private bool hasAssignedEndpoint;
    private global::Rhino.DistributedHashTable.Protocol.NodeEndpoint assignedEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
    public bool HasAssignedEndpoint {
      get { return hasAssignedEndpoint; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint AssignedEndpoint {
      get { return assignedEndpoint_; }
    }
    
    private bool hasInProcessOfMovingToEndpoint;
    private global::Rhino.DistributedHashTable.Protocol.NodeEndpoint inProcessOfMovingToEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
    public bool HasInProcessOfMovingToEndpoint {
      get { return hasInProcessOfMovingToEndpoint; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint InProcessOfMovingToEndpoint {
      get { return inProcessOfMovingToEndpoint_; }
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> backups_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> BackupsList {
      get { return backups_; }
    }
    public int BackupsCount {
      get { return backups_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint GetBackups(int index) {
      return backups_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIndex) return false;
        if (!hasVersion) return false;
        if (!hasAssignedEndpoint) return false;
        if (!AssignedEndpoint.IsInitialized) return false;
        if (HasInProcessOfMovingToEndpoint) {
          if (!InProcessOfMovingToEndpoint.IsInitialized) return false;
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.NodeEndpoint element in BackupsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasIndex) {
        output.WriteInt32(1, Index);
      }
      if (HasVersion) {
        output.WriteBytes(2, Version);
      }
      if (HasAssignedEndpoint) {
        output.WriteMessage(3, AssignedEndpoint);
      }
      if (HasInProcessOfMovingToEndpoint) {
        output.WriteMessage(4, InProcessOfMovingToEndpoint);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.NodeEndpoint element in BackupsList) {
        output.WriteMessage(5, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Index);
        }
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Version);
        }
        if (HasAssignedEndpoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, AssignedEndpoint);
        }
        if (HasInProcessOfMovingToEndpoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, InProcessOfMovingToEndpoint);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.NodeEndpoint element in BackupsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Segment ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Segment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Segment ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Segment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Segment ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Segment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Segment ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Segment ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Segment prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<Segment, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      Segment result = new Segment();
      
      protected override Segment MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new Segment();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return Segment.Descriptor; }
      }
      
      public override Segment DefaultInstanceForType {
        get { return Segment.DefaultInstance; }
      }
      
      public override Segment BuildPartial() {
        result.backups_.MakeReadOnly();
        Segment returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Segment) {
          return MergeFrom((Segment) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Segment other) {
        if (other == Segment.DefaultInstance) return this;
        if (other.HasIndex) {
          Index = other.Index;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasAssignedEndpoint) {
          MergeAssignedEndpoint(other.AssignedEndpoint);
        }
        if (other.HasInProcessOfMovingToEndpoint) {
          MergeInProcessOfMovingToEndpoint(other.InProcessOfMovingToEndpoint);
        }
        if (other.backups_.Count != 0) {
          base.AddRange(other.backups_, result.backups_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              Index = input.ReadInt32();
              break;
            }
            case 18: {
              Version = input.ReadBytes();
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              if (HasAssignedEndpoint) {
                subBuilder.MergeFrom(AssignedEndpoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AssignedEndpoint = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              if (HasInProcessOfMovingToEndpoint) {
                subBuilder.MergeFrom(InProcessOfMovingToEndpoint);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              InProcessOfMovingToEndpoint = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddBackups(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasIndex {
        get { return result.HasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      public pb::ByteString Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasAssignedEndpoint {
       get { return result.HasAssignedEndpoint; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint AssignedEndpoint {
        get { return result.AssignedEndpoint; }
        set { SetAssignedEndpoint(value); }
      }
      public Builder SetAssignedEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasAssignedEndpoint = true;
        result.assignedEndpoint_ = value;
        return this;
      }
      public Builder SetAssignedEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasAssignedEndpoint = true;
        result.assignedEndpoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAssignedEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasAssignedEndpoint &&
            result.assignedEndpoint_ != global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance) {
            result.assignedEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder(result.assignedEndpoint_).MergeFrom(value).BuildPartial();
        } else {
          result.assignedEndpoint_ = value;
        }
        result.hasAssignedEndpoint = true;
        return this;
      }
      public Builder ClearAssignedEndpoint() {
        result.hasAssignedEndpoint = false;
        result.assignedEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
        return this;
      }
      
      public bool HasInProcessOfMovingToEndpoint {
       get { return result.HasInProcessOfMovingToEndpoint; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint InProcessOfMovingToEndpoint {
        get { return result.InProcessOfMovingToEndpoint; }
        set { SetInProcessOfMovingToEndpoint(value); }
      }
      public Builder SetInProcessOfMovingToEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasInProcessOfMovingToEndpoint = true;
        result.inProcessOfMovingToEndpoint_ = value;
        return this;
      }
      public Builder SetInProcessOfMovingToEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasInProcessOfMovingToEndpoint = true;
        result.inProcessOfMovingToEndpoint_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInProcessOfMovingToEndpoint(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasInProcessOfMovingToEndpoint &&
            result.inProcessOfMovingToEndpoint_ != global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance) {
            result.inProcessOfMovingToEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.CreateBuilder(result.inProcessOfMovingToEndpoint_).MergeFrom(value).BuildPartial();
        } else {
          result.inProcessOfMovingToEndpoint_ = value;
        }
        result.hasInProcessOfMovingToEndpoint = true;
        return this;
      }
      public Builder ClearInProcessOfMovingToEndpoint() {
        result.hasInProcessOfMovingToEndpoint = false;
        result.inProcessOfMovingToEndpoint_ = global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.DefaultInstance;
        return this;
      }
      
      public scg::IList<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> BackupsList {
        get { return result.backups_; }
      }
      public int BackupsCount {
        get { return result.BackupsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.NodeEndpoint GetBackups(int index) {
        return result.GetBackups(index);
      }
      public Builder SetBackups(int index, global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.backups_[index] = value;
        return this;
      }
      public Builder SetBackups(int index, global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.backups_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBackups(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.backups_.Add(value);
        return this;
      }
      public Builder AddBackups(global::Rhino.DistributedHashTable.Protocol.NodeEndpoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.backups_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBackups(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.NodeEndpoint> values) {
        base.AddRange(values, result.backups_);
        return this;
      }
      public Builder ClearBackups() {
        result.backups_.Clear();
        return this;
      }
    }
  }
  
  public sealed partial class TopologyResultMessage : pb::GeneratedMessage<TopologyResultMessage, TopologyResultMessage.Builder> {
    private static readonly TopologyResultMessage defaultInstance = new Builder().BuildPartial();
    public static TopologyResultMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TopologyResultMessage DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override TopologyResultMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_TopologyResultMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TopologyResultMessage, TopologyResultMessage.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_TopologyResultMessage__FieldAccessorTable; }
    }
    
    private bool hasTimestampAsDouble;
    private double timestampAsDouble_ = 0D;
    public bool HasTimestampAsDouble {
      get { return hasTimestampAsDouble; }
    }
    public double TimestampAsDouble {
      get { return timestampAsDouble_; }
    }
    
    private bool hasVersion;
    private pb::ByteString version_ = pb::ByteString.Empty;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public pb::ByteString Version {
      get { return version_; }
    }
    
    private pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.Segment> segments_ = new pbc::PopsicleList<global::Rhino.DistributedHashTable.Protocol.Segment>();
    public scg::IList<global::Rhino.DistributedHashTable.Protocol.Segment> SegmentsList {
      get { return segments_; }
    }
    public int SegmentsCount {
      get { return segments_.Count; }
    }
    public global::Rhino.DistributedHashTable.Protocol.Segment GetSegments(int index) {
      return segments_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimestampAsDouble) return false;
        if (!hasVersion) return false;
        foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasTimestampAsDouble) {
        output.WriteDouble(1, TimestampAsDouble);
      }
      if (HasVersion) {
        output.WriteBytes(2, Version);
      }
      foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
        output.WriteMessage(3, element);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasTimestampAsDouble) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, TimestampAsDouble);
        }
        if (HasVersion) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, Version);
        }
        foreach (global::Rhino.DistributedHashTable.Protocol.Segment element in SegmentsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TopologyResultMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TopologyResultMessage ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TopologyResultMessage prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<TopologyResultMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      TopologyResultMessage result = new TopologyResultMessage();
      
      protected override TopologyResultMessage MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new TopologyResultMessage();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return TopologyResultMessage.Descriptor; }
      }
      
      public override TopologyResultMessage DefaultInstanceForType {
        get { return TopologyResultMessage.DefaultInstance; }
      }
      
      public override TopologyResultMessage BuildPartial() {
        result.segments_.MakeReadOnly();
        TopologyResultMessage returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TopologyResultMessage) {
          return MergeFrom((TopologyResultMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TopologyResultMessage other) {
        if (other == TopologyResultMessage.DefaultInstance) return this;
        if (other.HasTimestampAsDouble) {
          TimestampAsDouble = other.TimestampAsDouble;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.segments_.Count != 0) {
          base.AddRange(other.segments_, result.segments_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 9: {
              TimestampAsDouble = input.ReadDouble();
              break;
            }
            case 18: {
              Version = input.ReadBytes();
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.Segment.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.Segment.CreateBuilder();
              input.ReadMessage(subBuilder, extensionRegistry);
              AddSegments(subBuilder.BuildPartial());
              break;
            }
          }
        }
      }
      
      
      public bool HasTimestampAsDouble {
        get { return result.HasTimestampAsDouble; }
      }
      public double TimestampAsDouble {
        get { return result.TimestampAsDouble; }
        set { SetTimestampAsDouble(value); }
      }
      public Builder SetTimestampAsDouble(double value) {
        result.hasTimestampAsDouble = true;
        result.timestampAsDouble_ = value;
        return this;
      }
      public Builder ClearTimestampAsDouble() {
        result.hasTimestampAsDouble = false;
        result.timestampAsDouble_ = 0D;
        return this;
      }
      
      public bool HasVersion {
        get { return result.HasVersion; }
      }
      public pb::ByteString Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        result.hasVersion = false;
        result.version_ = pb::ByteString.Empty;
        return this;
      }
      
      public scg::IList<global::Rhino.DistributedHashTable.Protocol.Segment> SegmentsList {
        get { return result.segments_; }
      }
      public int SegmentsCount {
        get { return result.SegmentsCount; }
      }
      public global::Rhino.DistributedHashTable.Protocol.Segment GetSegments(int index) {
        return result.GetSegments(index);
      }
      public Builder SetSegments(int index, global::Rhino.DistributedHashTable.Protocol.Segment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.segments_[index] = value;
        return this;
      }
      public Builder SetSegments(int index, global::Rhino.DistributedHashTable.Protocol.Segment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.segments_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSegments(global::Rhino.DistributedHashTable.Protocol.Segment value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.segments_.Add(value);
        return this;
      }
      public Builder AddSegments(global::Rhino.DistributedHashTable.Protocol.Segment.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.segments_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSegments(scg::IEnumerable<global::Rhino.DistributedHashTable.Protocol.Segment> values) {
        base.AddRange(values, result.segments_);
        return this;
      }
      public Builder ClearSegments() {
        result.segments_.Clear();
        return this;
      }
    }
  }
  
  public sealed partial class MessageWrapper : pb::GeneratedMessage<MessageWrapper, MessageWrapper.Builder> {
    private static readonly MessageWrapper defaultInstance = new Builder().BuildPartial();
    public static MessageWrapper DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MessageWrapper DefaultInstanceForType {
      get { return defaultInstance; }
    }
    
    protected override MessageWrapper ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_MessageWrapper__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MessageWrapper, MessageWrapper.Builder> InternalFieldAccessors {
      get { return global::Rhino.DistributedHashTable.Protocol.Master.internal__static_Rhino_DistributedHashTable_Protocol_MessageWrapper__FieldAccessorTable; }
    }
    
    private bool hasType;
    private global::Rhino.DistributedHashTable.Protocol.MessageType type_ = global::Rhino.DistributedHashTable.Protocol.MessageType.GetTopologyRequest;
    public bool HasType {
      get { return hasType; }
    }
    public global::Rhino.DistributedHashTable.Protocol.MessageType Type {
      get { return type_; }
    }
    
    private bool hasJoinRequest;
    private global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage joinRequest_ = global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.DefaultInstance;
    public bool HasJoinRequest {
      get { return hasJoinRequest; }
    }
    public global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage JoinRequest {
      get { return joinRequest_; }
    }
    
    private bool hasJoinResponse;
    private global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage joinResponse_ = global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.DefaultInstance;
    public bool HasJoinResponse {
      get { return hasJoinResponse; }
    }
    public global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage JoinResponse {
      get { return joinResponse_; }
    }
    
    private bool hasTopology;
    private global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage topology_ = global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.DefaultInstance;
    public bool HasTopology {
      get { return hasTopology; }
    }
    public global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage Topology {
      get { return topology_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (HasJoinRequest) {
          if (!JoinRequest.IsInitialized) return false;
        }
        if (HasJoinResponse) {
          if (!JoinResponse.IsInitialized) return false;
        }
        if (HasTopology) {
          if (!Topology.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteEnum(1, (int) Type);
      }
      if (HasJoinRequest) {
        output.WriteMessage(2, JoinRequest);
      }
      if (HasJoinResponse) {
        output.WriteMessage(3, JoinResponse);
      }
      if (HasTopology) {
        output.WriteMessage(4, Topology);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (HasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (HasJoinRequest) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, JoinRequest);
        }
        if (HasJoinResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, JoinResponse);
        }
        if (HasTopology) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Topology);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MessageWrapper ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageWrapper ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageWrapper ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageWrapper ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageWrapper ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageWrapper ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MessageWrapper ParseFrom(pb::CodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageWrapper ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MessageWrapper prototype) {
      return (Builder) new Builder().MergeFrom(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilder<MessageWrapper, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {}
      
      MessageWrapper result = new MessageWrapper();
      
      protected override MessageWrapper MessageBeingBuilt {
        get { return result; }
      }
      
      public override Builder Clear() {
        result = new MessageWrapper();
        return this;
      }
      
      public override Builder Clone() {
        return new Builder().MergeFrom(result);
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return MessageWrapper.Descriptor; }
      }
      
      public override MessageWrapper DefaultInstanceForType {
        get { return MessageWrapper.DefaultInstance; }
      }
      
      public override MessageWrapper BuildPartial() {
        MessageWrapper returnMe = result;
        result = null;
        return returnMe;
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MessageWrapper) {
          return MergeFrom((MessageWrapper) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MessageWrapper other) {
        if (other == MessageWrapper.DefaultInstance) return this;
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasJoinRequest) {
          MergeJoinRequest(other.JoinRequest);
        }
        if (other.HasJoinResponse) {
          MergeJoinResponse(other.JoinResponse);
        }
        if (other.HasTopology) {
          MergeTopology(other.Topology);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        pb::UnknownFieldSet.Builder unknownFields = null;
        while (true) {
          uint tag = input.ReadTag();
          switch (tag) {
            case 0: {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag);
              break;
            }
            case 8: {
              int rawValue = input.ReadEnum();
              if (!global::System.Enum.IsDefined(typeof(global::Rhino.DistributedHashTable.Protocol.MessageType), rawValue)) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong) rawValue);
              } else {
                Type = (global::Rhino.DistributedHashTable.Protocol.MessageType) rawValue;
              }
              break;
            }
            case 18: {
              global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.CreateBuilder();
              if (HasJoinRequest) {
                subBuilder.MergeFrom(JoinRequest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              JoinRequest = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.CreateBuilder();
              if (HasJoinResponse) {
                subBuilder.MergeFrom(JoinResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              JoinResponse = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.Builder subBuilder = global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.CreateBuilder();
              if (HasTopology) {
                subBuilder.MergeFrom(Topology);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Topology = subBuilder.BuildPartial();
              break;
            }
          }
        }
      }
      
      
      public bool HasType {
       get { return result.HasType; }
      }
      public global::Rhino.DistributedHashTable.Protocol.MessageType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Rhino.DistributedHashTable.Protocol.MessageType value) {
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        result.hasType = false;
        result.type_ = global::Rhino.DistributedHashTable.Protocol.MessageType.GetTopologyRequest;
        return this;
      }
      
      public bool HasJoinRequest {
       get { return result.HasJoinRequest; }
      }
      public global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage JoinRequest {
        get { return result.JoinRequest; }
        set { SetJoinRequest(value); }
      }
      public Builder SetJoinRequest(global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasJoinRequest = true;
        result.joinRequest_ = value;
        return this;
      }
      public Builder SetJoinRequest(global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasJoinRequest = true;
        result.joinRequest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJoinRequest(global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasJoinRequest &&
            result.joinRequest_ != global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.DefaultInstance) {
            result.joinRequest_ = global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.CreateBuilder(result.joinRequest_).MergeFrom(value).BuildPartial();
        } else {
          result.joinRequest_ = value;
        }
        result.hasJoinRequest = true;
        return this;
      }
      public Builder ClearJoinRequest() {
        result.hasJoinRequest = false;
        result.joinRequest_ = global::Rhino.DistributedHashTable.Protocol.JoinRequestMessage.DefaultInstance;
        return this;
      }
      
      public bool HasJoinResponse {
       get { return result.HasJoinResponse; }
      }
      public global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage JoinResponse {
        get { return result.JoinResponse; }
        set { SetJoinResponse(value); }
      }
      public Builder SetJoinResponse(global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasJoinResponse = true;
        result.joinResponse_ = value;
        return this;
      }
      public Builder SetJoinResponse(global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasJoinResponse = true;
        result.joinResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJoinResponse(global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasJoinResponse &&
            result.joinResponse_ != global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.DefaultInstance) {
            result.joinResponse_ = global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.CreateBuilder(result.joinResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.joinResponse_ = value;
        }
        result.hasJoinResponse = true;
        return this;
      }
      public Builder ClearJoinResponse() {
        result.hasJoinResponse = false;
        result.joinResponse_ = global::Rhino.DistributedHashTable.Protocol.JoinResponseMessage.DefaultInstance;
        return this;
      }
      
      public bool HasTopology {
       get { return result.HasTopology; }
      }
      public global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage Topology {
        get { return result.Topology; }
        set { SetTopology(value); }
      }
      public Builder SetTopology(global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        result.hasTopology = true;
        result.topology_ = value;
        return this;
      }
      public Builder SetTopology(global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        result.hasTopology = true;
        result.topology_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTopology(global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        if (result.HasTopology &&
            result.topology_ != global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.DefaultInstance) {
            result.topology_ = global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.CreateBuilder(result.topology_).MergeFrom(value).BuildPartial();
        } else {
          result.topology_ = value;
        }
        result.hasTopology = true;
        return this;
      }
      public Builder ClearTopology() {
        result.hasTopology = false;
        result.topology_ = global::Rhino.DistributedHashTable.Protocol.TopologyResultMessage.DefaultInstance;
        return this;
      }
    }
  }
  
  #endregion
  
}
